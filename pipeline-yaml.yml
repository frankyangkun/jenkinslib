# //定义mvn环境 2023年03月27日17:06:58实验失败
# //def mvnHome = tool 'M3'
# //env.PATH = "${mvnHome}/bin:${env.PATH}"
# pipeline{
#     agent{
#         kubernetes{
#             label "jenkins-slave-jnlp2"
#             cloud 'kubernetes'
#             yaml '''
---
kind: Pod #Deployment改成Pod
apiVersion: v1 #apps/v1改成v1
metadata:
  labels:
    #jenkins3: slave3 
    app: jenkinsagent #随便定义，不一定要和k8s插件自带的jenkins:slave一致
  name: jenkinsagent #这个name加不加都不影响
  namespace: devops
spec:
  #nodeName: node2
  containers:
    #- name: jenkinsagent
    - name: jnlp #必须是jnlp
      #image: jenkins/inbound-agent:3107.v665000b_51092-4 #这是jenkins slave专用的镜像,不能用jenkins原来的镜像
      #image: jenkinsci/jnlp-slave:3.36-1
      image: frankyang1988/jenkinsslave-maven:0328 #二次打包的jenkins/inbound-agent:3107.v665000b_51092-4镜像，包含了mvn
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 0
        privileged: true
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 512Mi
      volumeMounts:
        - name: jenkinsagent-workdir
          #mountPath: /home/jenkins/agent/remoting
          mountPath: /home/jenkins/workspace
        #- name: buildtools 此方法失败，最终改为二次打包slave镜像，包含mvn
        #  mountPath: /home/jenkins/buildtools
        - name: docker
          mountPath: /run/docker.sock
        - name: docker-home
          mountPath: /usr/bin/docker
        - name: daemon
          mountPath: /etc/docker
        - name: kubectl-config
          mountPath: /home/jenkins/.kube
        - name: kubectl
          mountPath: /usr/bin/kubectl
      env: #定义全局的环境变量
        - name: JENKINS_AGENT_WORKDIR
          #value: /home/jenkins/agent/remoting
          value: /home/jenkins/workspace
  volumes:
    - name: jenkinsagent-workdir
      hostPath:
        path: /data/devops/jenkinsagent-workdir
        type: Directory
    #- name: buildtools 此方法失败，最终改为二次打包slave镜像，包含mvn
    #  hostPath:
    #    path: /usr/local/buildtools
    #    type: Directory
    - name: docker
      hostPath:
        path: /run/docker.sock
        type: ""
    - name: docker-home
      hostPath:
        path: /usr/bin/docker
        type: ""
    - name: daemon
      hostPath:
        path: /etc/docker
        type: ""
    - name: kubectl-config
      hostPath:
        path: /root/.kube
        type: Directory
    - name: kubectl
      hostPath:
        path: /usr/bin/kubectl
        type: ""
  serviceAccountName: jenkins
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: jenkins
  name: jenkins
  namespace: devops
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jenkins
  namespace: devops
rules:
 - apiGroups: [""]
   resources: ["pods"]
   verbs: ["create","delete","get","list","patch","update","watch"]
 - apiGroups: [""]
   resources: ["pods/exec"]
   verbs: ["create","delete","get","list","patch","update","watch"]
 - apiGroups: [""]
   resources: ["pods/log"]
   verbs: ["get","list","watch"]
 - apiGroups: [""]
   resources: ["secrets"]
   verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins
  namespace: devops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
 - kind: ServiceAccount
   name: jenkins
   namespace: devops
# '''
#         }
#     }
#     stages{
#         // //定义mvn环境
#         // def mvnHome = tool 'M3'
#         // env.PATH = "${mvnHome}/bin:${env.PATH}"
#         stage("test"){
#             steps{
#                 script{
#                   sh"""
#                     echo "=========动态生成jenkins slave==========="
#                     id
#                     docker -v
#                     docker info
#                     mvn -v
#                     kubectl get pod -n devops -o wide
#                   """
#                 }
#             }
#         }
#     }
# }