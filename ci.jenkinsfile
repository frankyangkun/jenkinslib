#!groovy

@Library('jenkinslib') _

//func from share library
def build = new org.devops.build()
//def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def sonar=new org.devops.sonarqube()
def k8s = new org.devops.kubernetes()

//不一定非要commit操作才能触发，手动执行也可触发
def runOpts 
//换成gitee时，无法获取gitlab的webhook中的projectId，和commitSha，定义一个空的测试用
def projectId
def commitSha

//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"

String srcUrl_parent = "${env.srcUrl_parent}"
String srcUrl_interface = "${env.srcUrl_interface}"
String srcUrl_provider = "${env.srcUrl_provider}"
String srcUrl_consumer = "${env.srcUrl_consumer}"
String branchName = "${env.branchName}"

if("${runOpts}"== "GitlabPush"){
    branchName = branch - "refs/heads/"
    currentBuild.description = "Trigger by ${username} ${branchName}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
}
println("$branchName")

//pipeline
pipeline{
  agent{
    node{
      label 'node03'
    }
  }
  //agent any
  
  stages{
    stage("拉取代码"){
      steps{
        script{
          tools.PrintMes("获取父工程代码","green")
          /*if("${runOpts}"== "GitlabPush"){
            branchName = branch - "refs/heads/"
          }
          println("$branchName")*/
          
          String parentName = build.getProjectName(srcUrl_parent) //relativeTargetDir必须使用双引号才能获取到值，此时是下载代码，必须使用.git后缀
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${parentName}"]], userRemoteConfigs: [[credentialsId: 'yk-gitee', url: '${srcUrl_parent}']]])
         //修改项目目录名称（去掉.git后缀）ffc90a2b-5b01-4ff7-93db-c4e805083471
          String parentName2 = build.getProjectName2(srcUrl_parent) //获取项目名，已经去掉.git
          build.modifyProjectDirName(srcUrl_parent,parentName2) //修改parent目录名（去掉.git后缀）
          
          tools.PrintMes("获取接口工程代码","green")
          String interfaceName = build.getProjectName(srcUrl_interface)
          //checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [], userRemoteConfigs: [[credentialsId: 'fd1f2048-303b-42a2-8328-9e57063de47f', url: '${srcUrl_interface}']]])
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${interfaceName}"]], userRemoteConfigs: [[credentialsId: 'yk-gitee', url: '${srcUrl_interface}']]])
          //修改项目目录名称（去掉.git后缀）
          String interfaceName2 = build.getProjectName2(srcUrl_interface) //获取项目名，已经去掉.git
          build.modifyProjectDirName(srcUrl_interface,interfaceName2) //修改interface目录名（去掉.git后缀）
         
          tools.PrintMes("获取生产端代码","green")
          String providerName = build.getProjectName(srcUrl_provider)
          //checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [], userRemoteConfigs: [[credentialsId: 'fd1f2048-303b-42a2-8328-9e57063de47f', url: '${srcUrl_provider}']]])
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${providerName}"]], userRemoteConfigs: [[credentialsId: 'yk-gitee', url: '${srcUrl_provider}']]])
          //修改项目目录名称（去掉.git后缀）
          String providerName2 = build.getProjectName2(srcUrl_provider) //获取项目名，已经去掉.git
          build.modifyProjectDirName(srcUrl_provider,providerName2) //修改provider目录名（去掉.git后缀）
          
          tools.PrintMes("获取消费端代码","green")
          String consumerName = build.getProjectName(srcUrl_consumer)
          //checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [], userRemoteConfigs: [[credentialsId: 'fd1f2048-303b-42a2-8328-9e57063de47f', url: '${srcUrl_consumer}']]])
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${consumerName}"]], userRemoteConfigs: [[credentialsId: 'yk-gitee', url: '${srcUrl_consumer}']]])
          //修改项目目录名称（去掉.git后缀）
          String consumerName2 = build.getProjectName2(srcUrl_consumer) //获取项目名，已经去掉.git
          build.modifyProjectDirName(srcUrl_consumer,consumerName2) //修改consumer目录名（去掉.git后缀）
        }
      }
    }

    /*stage("拉取并构建 interface"){
      steps{
        script{
          tools.PrintMes("获取接口工程代码","green")
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [], userRemoteConfigs: [[credentialsId: 'fd1f2048-303b-42a2-8328-9e57063de47f', url: '${srcUrl_interface}']]])
          tools.PrintMes("执行打包","green")
          build.Build(buildType,buildShell)
        }
      }
    }*/
    /*stage("拉取并构建 provider"){
      steps{
        script{
          tools.PrintMes("获取生产端代码","green")
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [], userRemoteConfigs: [[credentialsId: 'fd1f2048-303b-42a2-8328-9e57063de47f', url: '${srcUrl_provider}']]])
          tools.PrintMes("执行打包","green")
          build.Build(buildType,buildShell)
        }
      }
    }*/
    /*stage("拉取并构建 consumer"){
      steps{
        script{
          tools.PrintMes("获取消费端代码","green")
          checkout([$class: 'GitSCM', branches: [[name: '${branchName}']], extensions: [], userRemoteConfigs: [[credentialsId: 'fd1f2048-303b-42a2-8328-9e57063de47f', url: '${srcUrl_consumer}']]])
          tools.PrintMes("执行打包","green")
          build.Build(buildType,buildShell)
        }
      }
    }*/
    stage("Vue前端项目构建"){
        steps{
            script{
                tools.PrintMes("开始Vue前端项目构建","green")
                /*docker.image('node:10.19.0-alpine').inside('-u 0:0 -v /var/jenkins_home/.npm:/root/.npm'){
                  sh """
                     id
                     ls /root/.npm
                     ls -al /root
                     npm config set unsafe-perm=true
                     npm config list
                     npm config set cache /root/.npm
                     npm cnofig list
                     ls
                     cd demo && npm install --unsafe-perm=true && npm run build && ls -l dist/ && sleep 15
                  """

                }*/
            }
        }
    }
    stage("后端项目构建"){
      steps{
        script{
          tools.PrintMes("开始项目构建","green")
          String parentName = build.getProjectName2(srcUrl_parent)//已经去掉.git
          String parentWorkspace = "${env.WORKSPACE}/${parentName}"
          
          String interfaceName = build.getProjectName2(srcUrl_interface)
          String interfaceWorkspace = "${env.WORKSPACE}/${interfaceName}"
          
          String providerName = build.getProjectName2(srcUrl_provider)
          String providerWorkspace = "${env.WORKSPACE}/${providerName}"
          
          String consumerName = build.getProjectName2(srcUrl_consumer)
          String consumerWorkspace = "${env.WORKSPACE}/${consumerName}"
          
          dir("${parentWorkspace}"){
            tools.PrintMes("执行parent打包","blue")
            build.Build(buildType,buildShell)
          }
          
          dir("${interfaceWorkspace}"){
            tools.PrintMes("执行interface打包","blue")
            build.Build(buildType,buildShell)
          }
          
          dir("${providerWorkspace}"){
            tools.PrintMes("执行provider打包","blue")
            build.Build(buildType,buildShell)
          }
          
          dir("${consumerWorkspace}"){
            tools.PrintMes("执行consumer打包","blue")
            build.Build(buildType,buildShell)
          }
          
          
          /*tools.PrintMes("执行打包","green")
          //mvnHOME = tool "M2"
          //sh "${mvnHOME}/bin/mvn ${buildShell}"
          build.Build(buildType,buildShell)*/
        }
      }
    }

    stage("SonarQube代码扫描"){
        steps{
            script{
                tools.PrintMes("代码扫描","green")

                String interfaceName = build.getProjectName2(srcUrl_interface)
                String interfaceWorkspace = "${env.WORKSPACE}/${interfaceName}"
                
                String providerName = build.getProjectName2(srcUrl_provider)
                String providerWorkspace = "${env.WORKSPACE}/${providerName}"
                
                String consumerName = build.getProjectName2(srcUrl_consumer)
                String consumerWorkspace = "${env.WORKSPACE}/${consumerName}"

                dir("${interfaceWorkspace}"){
                    tools.PrintMes("执行interface代码扫描","blue")
                    sonar.SonarScan("test","${interfaceName}","${interfaceName}","src") 
                }
                dir("${providerWorkspace}"){
                    tools.PrintMes("执行provider代码扫描","blue")
                    sonar.SonarScan("test","${providerName}","${providerName}","src") 
                }
                dir("${consumerWorkspace}"){
                    tools.PrintMes("执行consumer代码扫描","blue")
                    sonar.SonarScan("test","${consumerName}","${consumerName}","src") 
                }
            }
        }
    }
    stage("构建docker镜像"){
        steps{
            script{
                tools.PrintMes("构建docker镜像","green")
                /*sh """
                   #构建docker镜像
                   cd demo
                   docker build -t demo/demo-web-app:1.1.1_xxx1 .
                   #上传镜像到dockerhub或harbor
                   docker push demo/demo-web-app:1.1.1_xxx1
                """*/
                k8s.GetDeployment("jenkins-storageclass","my-jenkins")

            }
        }
    }
    stage("UI自动化测试"){
        steps{
            script{
                tools.PrintMes("UI自动化测试","green")
            }
        }
    }
    stage("接口自动化测试"){
        steps{
            script{
                tools.PrintMes("接口自动化测试","green")
            }
        }
    }
    stage("版本发布"){
        steps{
            script{
                tools.PrintMes("版本发布","green")
            }
        }
    }       
    
    /*stage("AntBuild"){
      steps{
        script{
          try{
            antHome = tool "ANT"
            sh "${antHome}/bin/ant ${buildShell}"
          }catch(e){
            println(e)
          }
        }
      }
    }
    stage("GradleBuild"){
      steps{
        script{
          gradleHome = tool "GRADLE"
          sh "${gradleHome}/bin/gradle ${buildShell}"
        }
      }
    }
    stage("NpmBuild"){
      steps{
        script{
          npmHome = tool "NPM"
          sh "${npmHome}/bin/npm ${buildShell}"
        }
      }
    }*/
  }
  post{
    always{
      script{
        println("always..")
      }
    }
    success{
      script{
        println("success..")
        //换成gitee时，无法获取gitlab的webhook中的projectId，注释掉
        //gitlab.ChangeCommitStatus(projectId,commitSha,"success")
      }
    }
    failure{
      script{
        println("failure..")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
      }
    }
    aborted{
      script{
        println("aborted..")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
      }
    }
  }
}
