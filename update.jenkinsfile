#!groovy

@Library('jenkinslib') _

//func from share library（2023年07月10日15:30:23）
def build = new org.devops.build()

def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def k8s = new org.devops.kubernetes()

String updateType = "${env.updateType}"
String releaseVersion = "${env.releaseVersion}"


//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"

String srcUrl_parent = "${env.srcUrl_parent}"
String srcUrl_interface = "${env.srcUrl_interface}"
String srcUrl_provider = "${env.srcUrl_provider}"
String srcUrl_consumer = "${env.srcUrl_consumer}"
String branchName = "${env.branchName}"

if("${runOpts}"== "GitlabPush"){
    branchName = branch - "refs/heads/"
    currentBuild.description = "Trigger by ${username} ${branchName}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
}
println("$branchName")

//pipeline
pipeline{
  agent{
    /*node{
      label 'node03'
    }*/
    kubernetes{
      //inheritFrom 'maven-3.8.1' //没用
      //label 'jenkinsagent'
      label "jenkins-slave-jnlp2"
      cloud 'kubernetes'
      yaml '''
---
kind: Pod #Deployment改成Pod
apiVersion: v1 #apps/v1改成v1
metadata:
  labels:
    #jenkins3: slave3 
    app: jenkinsagent #随便定义，不一定要和k8s插件自带的jenkins:slave一致
  name: jenkinsagent #这个name加不加都不影响
  namespace: devops
spec:
  #nodeName: node2
  containers:
    #- name: jenkinsagent
    - name: jnlp #必须是jnlp
      #image: jenkins/inbound-agent:3107.v665000b_51092-4 #这是jenkins slave专用的镜像,不能用jenkins原来的镜像
      #image: jenkinsci/jnlp-slave:3.36-1
      image: frankyang1988/jenkinsslave-maven:0328 #二次打包的jenkins/inbound-agent:3107.v665000b_51092-4镜像，包含了mvn
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 0
        privileged: true
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 512Mi
      volumeMounts:
        - name: jenkinsagent-workdir
          #mountPath: /home/jenkins/agent/remoting
          mountPath: /home/jenkins/workspace
        #- name: buildtools 此方法失败，最终改为二次打包slave镜像，包含mvn
        #  mountPath: /home/jenkins/buildtools
        - name: docker
          mountPath: /run/docker.sock
        - name: docker-home
          mountPath: /usr/bin/docker
        - name: daemon
          mountPath: /etc/docker
        - name: kubectl-config
          mountPath: /home/jenkins/.kube
        - name: kubectl
          mountPath: /usr/bin/kubectl
        - name: maven-localrepo
          mountPath: /root/.m2/repository
      env: #定义全局的环境变量
        - name: JENKINS_AGENT_WORKDIR
          #value: /home/jenkins/agent/remoting
          value: /home/jenkins/workspace
  volumes:
    - name: maven-localrepo
      hostPath:
        path: /root/data/devops/mavenlocalrepo
        type: Directory
    - name: jenkinsagent-workdir
      hostPath:
        path: /root/data/devops/jenkinsagent-workdir
        type: Directory
    #- name: buildtools 此方法失败，最终改为二次打包slave镜像，包含mvn
    #  hostPath:
    #    path: /usr/local/buildtools
    #    type: Directory
    - name: docker
      hostPath:
        path: /run/docker.sock
        type: ""
    - name: docker-home
      hostPath:
        path: /usr/bin/docker
        type: ""
    - name: daemon
      hostPath:
        path: /etc/docker
        type: ""
    - name: kubectl-config
      hostPath:
        path: /root/.kube
        type: Directory
    - name: kubectl
      hostPath:
        path: /usr/bin/kubectl
        type: ""
  serviceAccountName: jenkins

'''
    }
  }
  //agent any
  
  stages{
    stage("UAT->STAG"){
        when{
            environment name: 'updateType', value: 'UAT->STAG'
        }
        steps{
            script{
                tools.PrintMes("UAT->STAG","green")

                //获取UAT中的images
                response = gitlab.GetRepoFile(7,"demo-uat%2f${releaseVersion}-uat.yaml")
                fileData = readYaml text: """${response}"""
                println(fileData["metadata"]["resourceVersion"])
                println(fileData["spec"]["template"]["spec"]["containers"][0]["image"])
                uatImage = fileData["spec"]["template"]["spec"]["containers"][0]["image"]
                tools.PrintMes("UAT IMAGES --> ${uatImage}","green")

                //获取STAG中最新的deployment
                stagResponse = k8s.GetDeployment("demo-stag","provider046")
                stagResponse = stagResponse.content
                //获取镜像和version
                stagFileData = readYaml text: """${stagResponse}"""
                stagOldImage = stagFileData["spec"]["template"]["spec"]["containers"][0]["image"]
                stagOldVersion = stagFileData["metadata"]["resourceVersion"]
                //更新镜像和version
                tools.PrintMes("STAG OLD IMAGES --> ${stagOldImage}","green")
                stagResponse.replace(stagOldImage,uatImage)
                stagResponse.replace(stagOldVersion,"")

                //生成最新版本的STAG版本文件
                //文件转换，上传文件
                base64Content = stagResponse.bytes.encodeBase64().toString()
                try{//如果文件存在，就不创建，而是更新
                    gitlab.CreateRepoFile(11,"demo-stag%2f${releaseVersion}-stag.yaml",base64Content)
                }catch(e){
                    gitlab.UpdateRepoFile(11,"demo-stag%2f${releaseVersion}-stag.yaml",base64Content)
                }
                
            }
        }
    }
  }
  post{
    always{
      script{
        println("always..")
      }
    }
    success{
      script{
        println("success..")
        //换成gitee时，无法获取gitlab的webhook中的projectId，注释掉
        //gitlab.ChangeCommitStatus(projectId,commitSha,"success")
      }
    }
    failure{
      script{
        println("failure..")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
      }
    }
    aborted{
      script{
        println("aborted..")
        //gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
      }
    }
  }
}
